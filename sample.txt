<input name="brandName" value={addOneFristForm.brandName} onChange={(e) => handelFristFormOnChange(e, index)} />

<input name="750" value={addOneFristForm.averageRate[750]} onChange={(e) => handelFristFormOnChange(e, index)} />
<input name="330" value={addOneFristForm.averageRate[330]} onChange={(e) => handelFristFormOnChange(e, index)} />
<input name="180" value={addOneFristForm.averageRate[180]} onChange={(e) => handelFristFormOnChange(e, index)} />

<input name="750" value={addOneFristForm.startingStock[750]} onChange={(e) => handelFristFormOnChange(e, index)} />
<input name="330" value={addOneFristForm.startingStock[330]} onChange={(e) => handelFristFormOnChange(e, index)} />
<input name="180" value={addOneFristForm.startingStock[180]} onChange={(e) => handelFristFormOnChange(e, index)} />

...


  const handelSubmitSecondForm = (e) => {
    const secondFormSubmit = addOneSecondFormState.map((returned) =>
      Object.assign(returned, {
        averageRate: formula.avg(
          returned.buyRate,
          returned.purchaseRate,
          returned.averageRate
        ),
        startingStock: formula.yog(
          returned.startingStock,
          returned.incomePurchase,
          returned.inflowCredit,
          returned.incomingPurchase,
          returned.sumRemainder
        ),
        sumRemainder: formula.saleDone(
          returned.sumRemainder,
          returned.closingStock,
          returned.sales
        ),
        total: formula.totalIndividual(
          returned.mainRate,
          returned.sales,
          returned.total
        ),
        grandTotal: formula.allTotal(
          returned.total,
          returned.total,
          returned.total,
          returned.grandTotal
        ),
      })
    );
  };




const obj = {
  a: 0,
  b: 1,
  d: 3,
  c: function() {
    return this.d - this.a + this.b;
  }
  
}


Admin                                     SubAdmin                                      Shop/User(current)

Create SubAdmin
Create User                               Create User                                   Daily Report 
Manage Subadmin                           manage User                                   Other Important Screens
                                                                                        Partners
                                                                                        Screen with details  


tasks: 
  1. useRmlAdd 
  2.useCashReciveAdd **
  3.useFristFormAdd ** Done

  ==>

  Daily Report / दैनिक रिपोर्ट 
Partners / पार्टनर
Branch / ब्रांच
Salary / वेतन
Payments दुकान/बार पेमेंट  
Commision / कमीशन  
Borrow / उधारी  
Final report / हिसाब
self Bill / दुकान बिल का फोर्मेट
Out Bill / बाहर के बिल का फोर्मेट
Extra /राशन सब्जी आदि खरीद
Log out
Jai Wine Shop 
A4 ss colony Merta city Raj.  


/shop/purchaseOutSideData  अंग्रेजी/बीयर/देशी/RML की आमद (खरीद बाहर से)

पीछे की उधारी में से, ब्रांचों से व अन्य से नकद प्राप्ति bowwocash retun data https://restless-escape-458382.postman.co/workspace/Team-Workspace~bbe8a7e3-6f2f-49b8-8562-33b814a1a8c8/request/19459280-08d553ba-1caa-4630-98e5-9a32d39d3d36

/shop/soldData अंग्रेजी/बीयर/देशी/RML का भेजान





/shop/totalExpensesData  कमीशन/खर्चा/फूट/बेगार/मंथली/पेनल्टी आदि



file -> api
PurchaseOutSideFrom -> purchaseOutSideData 

CommissonFrom -> totalExpensesData
craditDabitState -> borrowedData


CashReciveFrom -> borrowCashReturnData
ShippingForm -> purchaseBorrowData
InflowBorrowingRML -> Bhejan

credit, creditTotal, 